<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<title>Air Hockey</title>
		<style>
			* {font-family: 'Roboto', sans-serif;}
			
			h1, p {text-align: center;}

			body { 
   				 background-color: #2b0e0e;
    			 color: whitesmoke;
   			}

			
			canvas {
				border: 1px solid black;
				background-image: url("../media/background.png");
				background-size: cover;
			}
			
			#canvasContainer {
				width: 100%;
				text-align: center;
			}
		</style>
		
		<!-- Load in socket.io -->
		<script src="/socket.io/socket.io.js"></script>
		
		<link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
		<script>			
			(function(){			
			var canvas; // Canvas
			var ctx;    // Context of the canvas
			
			var bufferCanvas; // The offscreen canvas, for buffering image data
			var bufferCtx;
			
			// Other various DOM and screen elements used for gameplay/server feedback
			var serverInfo;
			var notification;
			
			// Game variables
			var socket; // The user's socket
			var side = {is: 0}; // Side 0 means left and 1 means right
			var user = {	
				name: "",
				position: {x: 0, y: 0},
				points: 0,
				img: new Image()
			};
			var contender = { 
				name: "",
				position: {x: -64, y: -64},
				points: 0,
				img: new Image(),
				lastTime: new Date().getTime()
			};
			var puck = { 
				position: {x: 640, y: 400},
				velocity: {x: 0, y: 0},
				img: new Image(),
				radius: 25,
				lastTime: new Date().getTime()
			};
			
			// Connects to the socket.io server
			// Sets up socket event delegates for server communication
			function connectSocket(e){
			
				// Connect to socket.io
				// The io variable is a global var from the socket.io script above
				socket = io.connect();
				
				socket.emit("update", {position: user.position}); // Emitting the user's starting position
			
				// Listen for drawImg calls, which are emitted when a new user connects
				socket.on("message", (data) => {serverInfo.innerHTML = data.message;});
			
				// Listener for user connection event
				socket.on("connect", () => {
					console.log("Connecting...");
					
					// retrieve the name from the entry field to send to server
					user.name = document.querySelector('#name').value;
					
					// for invalid entries, generate a random name
					if (!user.name || user.name === "") user.name = 'user' + Math.floor(Math.random()*1000000);
					
					socket.emit("join", {name: user.name});
				});
				
				// Listen for update data sent from the Game's instance
				socket.on("infoUpdate", (data) => {
					switch(data.object){ // Game's instance tells which object it's updating in data.object
						case "user":
							if(data.position) user.position = data.position;
							if(data.name) user.name = data.name;
							if(data.side){
								side.is = data.side;
								Object.freeze(side); // To make the side unchangeable
							}	
							break;
                        
                        case "contender":
							if(data.time > contender.lastTime){ // Update opponent's info only if the new data is more recent
								if(data.position) contender.position = data.position;
								if (data.name) contender.name = data.name;													
								contender.lastTime = data.time; // Update opponent's last updated time to this packet's time
							}
                            break;
                            
						case "puck":
							if(data.time > puck.lastTime){ // Update puck's info only if the new data is more recent
								puck.position = data.position;
								puck.velocity = data.velocity;				
								puck.lastTime = data.time; // Update puck's last updated time to this packet's time
							}
							break;
					}
				});
			
				socket.on("goalScored", (data) => { // Whenever a goal is scored, this is fired
                    // 'side' field of the incoming data says who scored the point
                    if(data.side === side.is) ++user.points;
					else ++contender.points;
				});
				
				// Listen for a successful join, and hide the connection buttons
				socket.on("joinSuccess", () => {document.querySelector('#joinForm').style.display = "none";});
				
				// When the server sends a notification, it needs to be displayed on the canvas the duration accompanying the message
				socket.on("notification", (data) => {
					notification = data.message; // Updating the global notification variable
					
					if(data.duration > 0){ // If duration is -ve, the message has to be shown permanantly
						setTimeout((currentNotif) => { // Resetting the notification after the duration ends
							if(notification === data.message) notification = ""; // Delete the notification if it hasn't been overwritten
						}, data.duration);
					}
				});
				
				socket.on("Start Match", update); // Listening for the server's signal to start the game
			}
			
            function constrain(value, minimum, maximum){ // Used to constrain the value between minimum and maximum
                return Math.min(Math.max(value, minimum), maximum);
            }
			
			function init(){ // Initialises canvas variables and emits a new draw call to other canvases
				canvas = document.querySelector('canvas');
                ctx = canvas.getContext('2d');
                ctx.font = "14pt 'Roboto'";
                ctx.fillStyle = "#ffffff";
				
				bufferCanvas = document.createElement('canvas'); // Offscreen buffer canvas
				bufferCtx = bufferCanvas.getContext('2d');
				
				serverInfo = document.querySelector('#serverInfo'); // Needed for displaying the server information
				
				document.querySelector('#connect').addEventListener('click', connectSocket); // Button for connecting
			
				// Get canvas mouseover callbacks to update paddle position
				document.addEventListener('mousemove', (e) => {
					var canvasPos = canvas.getBoundingClientRect();
					user.position.x = constrain(e.x - canvasPos.left, (side.is*canvas.width/2) + user.img.width/2, (side.is*canvas.width/2)+canvas.width/2-user.img.width/2);
					user.position.y = constrain(e.y - canvasPos.top, user.img.width/2, canvas.height-user.img.height/2);
				});
				
				// Loading paddle and puck icons from the server
				user.img.src = "./media/userPaddle.png";
				contender.img.src = "./media/enemyPaddle.png";
				puck.img.src = "./media/puck.png";
			}
			
			// The main draw and update loop, which is started once a game begins
			function update(){
				ctx.clearRect(0, 0, canvas.width, canvas.height); // For clearing the screen
				
				// Updating puck position
				puck.position.x += puck.velocity.x;
				puck.position.y += puck.velocity.y;
                
                // In case of server disconnection, client will simulate the physics of the puck	
				bouncePuck();			
				applyFriction(puck, 0.9950);
				
				// Drawing the puck and the two players' paddles
				ctx.drawImage(puck.img, puck.position.x - puck.img.width/2, puck.position.y - puck.img.height/2);
				ctx.drawImage(user.img, user.position.x - user.img.width/2, user.position.y - user.img.height/2);
				ctx.drawImage(contender.img, contender.position.x - contender.img.width/2, contender.position.y - contender.img.height/2);
				
				// Drawing the scores in the corners
				ctx.save();
				if(side.is === 0){
					ctx.fillText(user.name + ": " + user.points, 5, 25);
					ctx.textAlign = "end";
					ctx.fillText(contender.points + " :" + contender.name, canvas.width - 5, 25);
				}
				else {
					ctx.fillText(contender.name + ": " + contender.points, 5, 25);
					ctx.textAlign = "end";
					ctx.fillText(user.points + " :" + user.name, canvas.width - 5, 25);
				}
				ctx.restore();
				
				socket.emit("update", {position: user.position}); // Emitting this user's position to the other user
				
				// Drawing the current notification from the server
				if (notification != "") {
					ctx.save();
						ctx.font = "36pt Roboto";
						ctx.textAlign = "center"
                        ctx.textBaseline = "middle";
						ctx.fillText(notification, canvas.width/2, canvas.height/3);
					ctx.restore();
				}
				requestAnimationFrame(update); // Required for refreshing the canvas
			}
    
            function applyFriction(obj, fraction){ // Applying friction to the obj by multiplying its velocity by the given fraction
                obj.velocity.x *= fraction;
                obj.velocity.y *= fraction;
                // If the object's speed in either direction is less than 0.001, it is brought to a standstill
                if(Math.abs(obj.velocity.x) < 0.001) obj.velocity.x = 0;
                if(Math.abs(obj.velocity.y) < 0.001) obj.velocity.y = 0;
            }
			
			function bouncePuck(){ // To bounce the puck off the walls of the board
				if ((puck.position.x - puck.radius < 0) || (puck.position.x + puck.radius > canvas.width)) puck.velocity.x *= -1;
				if ((puck.position.y - puck.radius < 0) || (puck.position.y + puck.radius > canvas.height)) puck.velocity.y *= -1;
			}
			
			window.onload = init;
			})();
		</script>
	</head>
	
	<body>
		<h1>Air Hockey</h1>
		
		<p id="serverInfo">Click on the connect button to search for another player online</p>
		
		<p id="joinForm">
			<input type="hidden" id="name" name="user" type="text" readonly value="<%= qs.name %>"/>
			<input id="connect" type='button' value='connect'/>
		</p>
		
		<div id="canvasContainer">
			<canvas width="1280" height="800"></canvas>
		</div>
	</body>
</html>